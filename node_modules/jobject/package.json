{
  "name": "jobject",
  "description": "A class that adds properties to your class that are easily overriden and maintain direct accessors.  Similiar to objective-c @property and @synthesize.",
  "version": "0.0.2",
  "author": {
    "name": "Jesse Earle",
    "email": "earle.jesse@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/should.js.git"
  },
  "homepage": "https://github.com/jearle/jobject",
  "keywords": [
    "properties",
    "objective-c",
    "@property",
    "@synthesize"
  ],
  "devDependencies": {
    "mocha": ">=1.6.0",
    "should": ">=1.2.1"
  },
  "main": "./lib/jobject",
  "engines": {
    "coffee": "*",
    "node": "*"
  },
  "readme": "Jobject\n===============\n\n  A class that adds properties to your class that are easily overriden and maintain direct accessors.  Similiar to objective-c @property and @synthesize.\n\n```coffee\nJobject = require './'\n\nclass MyClass extends Jobject\n  @property 'name'\n\n  @property 'title', '', \n    get: ()->\n      return 'TITLE: ' + @_title\n  \n  @property 'author', '', \n    get: ()->\n      return @_author + '!!!!'\n    set: (author)->\n      @_author = 'AUTHOR: ' + author\n\nmyClass = new MyClass()\nmyClass.name = 'Jesse Earle'\nmyClass.title = 'Fruit Loop'\nmyClass.author = 'Stephen King'\n\nconsole.log(myClass.name) # Jesse earle\nconsole.log(myClass.title) # TITLE: Fruit Loop\nconsole.log(myClass.author) #AUTHOR: Stephen King!!!!\n```\n\n## Features\n\n  * A simple way to attach getters and setters to your classes\n  * Similarity Objective-C @property and @synthesize\n  * Reduce redundant code\n  * Access properties with the simple dot syntax\n\n## Usage\n\nCreate a class that extends Jobject\n\n```coffee\nclass MyClass extends Jobject\n  @property 'name'\n```\n\nThis class now has the following properties:\n  * _name\n  * name\n\nThe _name property provides direct access to the value of the property.\n\nThe name property on the other hand actually points to a getter and setter function, but you still access it normally:\n\n```coffee\nmyClass = new MyClass()\nmyClass.name = 'Jesse'\nconsole.log myClass.name # logs: Jesse\n```\n\nYou can also give a default value to the property:\n\n```coffee\nclass MyClass extends Jobject\n  @property 'name', 'Default'\n\nmyClass = new MyClass()\nconsole.log myClass.name # logs: Default\n```\n\nIf you do not provide a default value it will point to null. Note that the property will exist on the instance.\n\nOverriding the getter and setter is simple:\n\n```coffee\nclass MyClass extends Jobject\n\n  @property 'name', '',\n    get: ()->\n      return @_name + '!'\n    set: (name)->\n      @_name = '!' + name\n\nmyClass = new MyClass()\nmyClass.name = 'Jesse'\nconsole.log myClass.name # logs: !Jesse!\n```",
  "_id": "jobject@0.0.2",
  "_from": "jobject"
}
