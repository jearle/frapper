// Generated by CoffeeScript 1.4.0
(function() {
  var Jobject, should,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  should = require('should');

  Jobject = require('../');

  describe('Jobject', function() {
    var TestClass, TestClassOverrides, testClass, testClass2, testClassOverrides;
    TestClass = (function(_super) {

      __extends(TestClass, _super);

      function TestClass() {
        return TestClass.__super__.constructor.apply(this, arguments);
      }

      TestClass.property('age', '12');

      return TestClass;

    })(Jobject);
    testClass = new TestClass();
    testClass2 = new TestClass();
    describe('Jobject.validPropertyName()', function() {
      it('should be a valid property name', function() {
        var propName, _i, _len, _ref, _results;
        _ref = ['a', '$', '_', 'a1'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          propName = _ref[_i];
          _results.push(Jobject.validPropertyName(propName).should.be["true"]);
        }
        return _results;
      });
      return it('should be an invalid property name', function() {
        var propName, _i, _len, _ref, _results;
        _ref = ['1', '^', '%', '(', ')', 'a&f'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          propName = _ref[_i];
          _results.push(Jobject.validPropertyName(propName).should.be["false"]);
        }
        return _results;
      });
    });
    describe('Jobject.property()', function() {
      it('should throw error', function() {
        return (function() {
          return Jobject.property('%');
        }).should["throw"](/^Invalid property+/);
      });
      it('should have private property', function() {
        return testClass.should.have.property('_age');
      });
      it('should have private property with initial value', function() {
        return testClass.should.have.property('_age', '12');
      });
      it('should have a property', function() {
        return testClass.should.have.property('age');
      });
      it('should have a property with intial value', function() {
        return testClass.should.have.property('age', '12');
      });
      it('should be able to take a value', function() {
        testClass.age = '13';
        return testClass.age.should.eql('13');
      });
      return it('should not equal each other', function() {
        return testClass.age.should.not.be.eql(testClass2.age);
      });
    });
    TestClassOverrides = (function(_super) {

      __extends(TestClassOverrides, _super);

      function TestClassOverrides() {
        return TestClassOverrides.__super__.constructor.apply(this, arguments);
      }

      TestClassOverrides.property('name', '', {
        get: function() {
          return this._name + '!';
        },
        set: function(name) {
          return this._name = '!' + name;
        }
      });

      return TestClassOverrides;

    })(Jobject);
    testClassOverrides = new TestClassOverrides();
    return it('should override setter and getter', function() {
      testClassOverrides.name = 'Jesse';
      return testClassOverrides.name.should.eql('!Jesse!');
    });
  });

}).call(this);
