assert = require 'assert'
Jobject = require '../../jobject'

testPropertyName = 'nameCamelCase'
testBadPropertyName = '1f'

createTestJobject = ()->
  jobject = new Jobject()
  jobject.property testPropertyName
  return jobject

describe 'Jobject', ()->

  describe 'Jobject.capitalizeFirstLetter', ()->
    it 'should be NameCamelCase', ()->
      assert.equal 'NameCamelCase', Jobject.capitalizeFirstLetter testPropertyName

  describe '#validPropertyName()', ()->
    
    jobject = new Jobject()
    
    it 'should return true', ()->
      assert.equal true, jobject.validPropertyName 'a'
      assert.equal true, jobject.validPropertyName '$'
      assert.equal true, jobject.validPropertyName '_'
      assert.equal true, jobject.validPropertyName 'a1'

    it 'should return false', ()->
      assert.equal false, jobject.validPropertyName '1'
      assert.equal false, jobject.validPropertyName '^'
      assert.equal false, jobject.validPropertyName '%'
      assert.equal false, jobject.validPropertyName '('
      assert.equal false, jobject.validPropertyName ')'
      assert.equal false, jobject.validPropertyName 'a&f'

  describe '#createPrivateName()', ()->

    jobject = new Jobject()
    privateName = jobject.createPrivateName testPropertyName
    
    it 'should equal _' + testPropertyName,()->
      assert.equal privateName, '_' + testPropertyName

  describe '#createSetterName()', ()->
    jobject = new Jobject()
    setterName = jobject.createSetterName testPropertyName

    it 'should equal setNameCamelCase', ()->
      assert.equal 'setNameCamelCase', setterName

  describe '#property()', ()->

    it 'should throw an error', ()->
      jobject = new Jobject()
      assert.throws(
        ()->
          jobject.property testBadPropertyName
        Error
      )

    it 'should contain a property _' + testPropertyName, ()->
      jobject = createTestJobject()
      
      assert jobject.hasOwnProperty '_' + testPropertyName

  describe '#addSetter()', ()->
    jobject = createTestJobject()
    it 'should contain a property called setNameCamelCase', ()->
      assert jobject.hasOwnProperty 'setNameCamelCase'

    it 'should be a function', ()->
      assert.equal typeof Function, typeof jobject['setNameCamelCase']

  describe '#addGetter()', ()->
    jobject = createTestJobject()
    
    it 'should contain a property called nameCamelCase', ()->
      assert jobject.hasOwnProperty 'nameCamelCase'

    it 'should be a function', ()->
      assert.equal typeof Function, typeof jobject['nameCamelCase']

  describe 'getter/setter', ()->
    jobject = createTestJobject()
    jobject.setNameCamelCase 'test'
    it 'should return test', ()->
      assert.equal 'test', jobject.nameCamelCase()

  describe 'test getter override', ()->
    class MyObject extends Jobject
      constructor: ()->
        @property 'name'

      name: ()->
        return @_name + '!'

    myObject = new MyObject()
    myObject.setName 'Jesse'

    it 'should return Jesse!', ()->
      assert.equal 'Jesse!', myObject.name()

  describe 'test setter override', ()->
    class MyObject extends Jobject
      constructor: ()->
        @property 'name'

      setName: (name)->
        @_name = name + '!'

    myObject = new MyObject()
    myObject.setName 'Jesse'

    it 'should return Jesse!', ()->
      assert.equal 'Jesse!', myObject.name()

  describe 'test getter and setter override', ()->
    class MyObject extends Jobject
      constructor: ()->
        @property 'name'

      setName: (name)->
        @_name = name + '!'

      name: ()->
        return @_name + '!'

    myObject = new MyObject()
    myObject.setName 'Jesse'

    it 'should return Jesse!!', ()->
      assert.equal 'Jesse!!', myObject.name()