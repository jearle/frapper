// Generated by CoffeeScript 1.4.0
(function() {
  var Jobject;

  Jobject = (function() {

    function Jobject() {}

    Jobject.capitalizeFirstLetter = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };

    Jobject.invalidPropertyName = function(name) {
      return Error('Invalid property name: ' + name);
    };

    Jobject.regex = {
      invalidPropertyName: /(^\d|\s|[^A-Za-z0-9$_])/g
    };

    Jobject.property = function(name, intitialValue, getterSetter) {
      var getFunction, privateName, setFunction, setterName;
      if (!this.validPropertyName(name)) {
        throw new this.invalidPropertyName(name);
      }
      privateName = this.createPrivateName(name);
      this.addPrivateProperty(privateName, intitialValue);
      setterName = this.createSetterName(name);
      setFunction = this.createSetter(privateName);
      getFunction = this.createGetter(privateName);
      if (getterSetter) {
        if (getterSetter.set) {
          setFunction = getterSetter.set;
        }
        if (getterSetter.get) {
          getFunction = getterSetter.get;
        }
      }
      return Object.defineProperty(this.prototype, name, {
        get: getFunction,
        set: setFunction
      });
    };

    Jobject.createGetter = function(privateName) {
      return function() {
        return this[privateName];
      };
    };

    Jobject.createSetter = function(privateName) {
      return function(value) {
        return this[privateName] = value;
      };
    };

    Jobject.addPrivateProperty = function(name, intitialValue) {
      if (intitialValue === void 0) {
        intitialValue = null;
      }
      return this.prototype[name] = intitialValue;
    };

    Jobject.createSetterName = function(name) {
      return 'set' + Jobject.capitalizeFirstLetter(name);
    };

    Jobject.createPrivateName = function(name) {
      return '_' + name;
    };

    Jobject.validPropertyName = function(name) {
      var validPropertyName;
      validPropertyName = false;
      if (!name.match(Jobject.regex.invalidPropertyName)) {
        validPropertyName = true;
      }
      return validPropertyName;
    };

    return Jobject;

  })();

  module.exports = Jobject;

}).call(this);
