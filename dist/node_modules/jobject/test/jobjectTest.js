// Generated by CoffeeScript 1.4.0
(function() {
  var Jobject, assert, createTestJobject, testBadPropertyName, testPropertyName,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  Jobject = require('../../jobject');

  testPropertyName = 'nameCamelCase';

  testBadPropertyName = '1f';

  createTestJobject = function() {
    var jobject;
    jobject = new Jobject();
    jobject.property(testPropertyName);
    return jobject;
  };

  describe('Jobject', function() {
    describe('Jobject.capitalizeFirstLetter', function() {
      return it('should be NameCamelCase', function() {
        return assert.equal('NameCamelCase', Jobject.capitalizeFirstLetter(testPropertyName));
      });
    });
    describe('#validPropertyName()', function() {
      var jobject;
      jobject = new Jobject();
      it('should return true', function() {
        assert.equal(true, jobject.validPropertyName('a'));
        assert.equal(true, jobject.validPropertyName('$'));
        assert.equal(true, jobject.validPropertyName('_'));
        return assert.equal(true, jobject.validPropertyName('a1'));
      });
      return it('should return false', function() {
        assert.equal(false, jobject.validPropertyName('1'));
        assert.equal(false, jobject.validPropertyName('^'));
        assert.equal(false, jobject.validPropertyName('%'));
        assert.equal(false, jobject.validPropertyName('('));
        assert.equal(false, jobject.validPropertyName(')'));
        return assert.equal(false, jobject.validPropertyName('a&f'));
      });
    });
    describe('#createPrivateName()', function() {
      var jobject, privateName;
      jobject = new Jobject();
      privateName = jobject.createPrivateName(testPropertyName);
      return it('should equal _' + testPropertyName, function() {
        return assert.equal(privateName, '_' + testPropertyName);
      });
    });
    describe('#createSetterName()', function() {
      var jobject, setterName;
      jobject = new Jobject();
      setterName = jobject.createSetterName(testPropertyName);
      return it('should equal setNameCamelCase', function() {
        return assert.equal('setNameCamelCase', setterName);
      });
    });
    describe('#property()', function() {
      it('should throw an error', function() {
        var jobject;
        jobject = new Jobject();
        return assert.throws(function() {
          return jobject.property(testBadPropertyName);
        }, Error);
      });
      return it('should contain a property _' + testPropertyName, function() {
        var jobject;
        jobject = createTestJobject();
        return assert(jobject.hasOwnProperty('_' + testPropertyName));
      });
    });
    describe('#addSetter()', function() {
      var jobject;
      jobject = createTestJobject();
      it('should contain a property called setNameCamelCase', function() {
        return assert(jobject.hasOwnProperty('setNameCamelCase'));
      });
      return it('should be a function', function() {
        return assert.equal(typeof Function, typeof jobject['setNameCamelCase']);
      });
    });
    describe('#addGetter()', function() {
      var jobject;
      jobject = createTestJobject();
      it('should contain a property called nameCamelCase', function() {
        return assert(jobject.hasOwnProperty('nameCamelCase'));
      });
      return it('should be a function', function() {
        return assert.equal(typeof Function, typeof jobject['nameCamelCase']);
      });
    });
    describe('getter/setter', function() {
      var jobject;
      jobject = createTestJobject();
      jobject.setNameCamelCase('test');
      return it('should return test', function() {
        return assert.equal('test', jobject.nameCamelCase());
      });
    });
    describe('test getter override', function() {
      var MyObject, myObject;
      MyObject = (function(_super) {

        __extends(MyObject, _super);

        function MyObject() {
          this.property('name');
        }

        MyObject.prototype.name = function() {
          return this._name + '!';
        };

        return MyObject;

      })(Jobject);
      myObject = new MyObject();
      myObject.setName('Jesse');
      return it('should return Jesse!', function() {
        return assert.equal('Jesse!', myObject.name());
      });
    });
    describe('test setter override', function() {
      var MyObject, myObject;
      MyObject = (function(_super) {

        __extends(MyObject, _super);

        function MyObject() {
          this.property('name');
        }

        MyObject.prototype.setName = function(name) {
          return this._name = name + '!';
        };

        return MyObject;

      })(Jobject);
      myObject = new MyObject();
      myObject.setName('Jesse');
      return it('should return Jesse!', function() {
        return assert.equal('Jesse!', myObject.name());
      });
    });
    return describe('test getter and setter override', function() {
      var MyObject, myObject;
      MyObject = (function(_super) {

        __extends(MyObject, _super);

        function MyObject() {
          this.property('name');
        }

        MyObject.prototype.setName = function(name) {
          return this._name = name + '!';
        };

        MyObject.prototype.name = function() {
          return this._name + '!';
        };

        return MyObject;

      })(Jobject);
      myObject = new MyObject();
      myObject.setName('Jesse');
      return it('should return Jesse!!', function() {
        return assert.equal('Jesse!!', myObject.name());
      });
    });
  });

}).call(this);
