// Generated by CoffeeScript 1.4.0
(function() {
  var Jobject, Option,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Jobject = require('jobject');

  Option = (function(_super) {

    __extends(Option, _super);

    Option.regex = {
      longHand: /--[A-z0-9]+/g,
      shortHand: /^-[A-z0-9]+/g,
      singleArg: /<[A-z0-9]+>/g,
      multipleArgs: /\[[A-z0-9]+\]/g
    };

    Option.type = {
      single: 0,
      multiple: 1,
      bool: 2
    };

    Option.isOptionSwitch = function(string) {
      return !!(string.match(Option.regex.shortHand)) || !!(string.match(Option.regex.longHand));
    };

    Option.property('shortHand');

    Option.property('longHand');

    Option.property('description');

    Option.property('argType');

    Option.property('name');

    function Option(commandString, description) {
      var longHand, shortHand;
      shortHand = this.findShortHand(commandString);
      longHand = this.findLongHand(commandString);
      this.shortHand = shortHand;
      this.longHand = longHand;
      this.description = description;
      this.setArgTypeWithCommandString(commandString);
      this.createNameFromLongHand();
    }

    Option.prototype.findShortHand = function(commandString) {
      return commandString.match(Option.regex.shortHand)[0];
    };

    Option.prototype.findLongHand = function(commandString) {
      return commandString.match(Option.regex.longHand)[0];
    };

    Option.prototype.setArgTypeWithCommandString = function(commandString) {
      if (commandString.match(Option.regex.singleArg)) {
        return this.argType = Option.type.single;
      } else if (commandString.match(Option.regex.multipleArgs)) {
        return this.argType = Option.type.multiple;
      } else {
        return this.argType = Option.type.bool;
      }
    };

    Option.prototype.createNameFromLongHand = function() {
      return this.name = this.longHand.substring(2, this.longHand.length);
    };

    return Option;

  })(Jobject);

  module.exports = Option;

}).call(this);
