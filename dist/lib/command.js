// Generated by CoffeeScript 1.4.0
(function() {
  var Command, Jobject, Option,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Jobject = require('jobject');

  Option = require('./option');

  Command = (function(_super) {

    __extends(Command, _super);

    Command.regex = {
      command: /^[A-Za-z0-9]+/g,
      singleArg: /<[A-z0-9]+>/g,
      multipleArgs: /\[[A-z0-9]+\]/g,
      args: /(<[A-z0-9]+>|\[[A-z0-9]+\])/g
    };

    Command.property('name');

    Command.property('options');

    Command.property('action');

    Command.property('description');

    Command.property('properties');

    Command.property('rawCommand');

    function Command(rawCommand, properties) {
      this.properties = properties;
      this.rawCommand = rawCommand;
      this.description = this.properties['description'];
      this.action = this.properties['action'];
      this.setNameWithRawCommand();
      this.setOptionsWithProperties();
    }

    Command.prototype.setNameWithRawCommand = function() {
      return this.name = this.extractNameFromRawCommand();
    };

    Command.prototype.setOptionsWithProperties = function() {
      return this.options = this.createOptionsFromProperties();
    };

    Command.prototype.getOptionWithSwitch = function(optionSwitch) {
      var option, _i, _len, _ref;
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.shortHand === optionSwitch) {
          return option;
        }
        if (option.longHand === optionSwitch) {
          return option;
        }
      }
    };

    Command.prototype.extractNameFromRawCommand = function() {
      return this.rawCommand.match(Command.regex.command)[0];
    };

    Command.prototype.createOptionsFromProperties = function() {
      var createdOptions, description, option, optionCommand, _ref;
      createdOptions = [];
      _ref = this.properties['options'];
      for (optionCommand in _ref) {
        description = _ref[optionCommand];
        option = new Option(optionCommand, description);
        createdOptions.push(option);
      }
      return createdOptions;
    };

    Command.prototype.isMultipleArgs = function(commandArg) {
      return !!commandArg.match(Command.regex.multipleArgs);
    };

    Command.prototype.isSingleArg = function(commandArg) {
      return !!commandArg.match(Command.regex.singleArg);
    };

    Command.prototype.run = function(args) {
      var action, applyArgs, commandArgs, multipleArgs, options;
      action = this.action;
      commandArgs = this.rawCommand.match(Command.regex.args);
      applyArgs = this.extractSingleArgs(commandArgs, args);
      multipleArgs = this.extractMultipleArgs(commandArgs, args);
      options = this.extractOptionValues(args);
      applyArgs.push(multipleArgs);
      return action.apply(options, applyArgs);
    };

    Command.prototype.extractOptionValues = function(args) {
      var arg, i, initialI, option, optionArgArray, optionObj, _i, _j, _len, _ref, _ref1;
      optionObj = {};
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.argType === Option.type.bool) {
          optionObj[option.name] = false;
        }
      }
      for (i = _j = 0, _ref1 = args.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        arg = args[i];
        if (Option.isOptionSwitch(arg)) {
          option = this.getOptionWithSwitch(arg);
          if (option.argType === Option.type.bool) {
            optionObj[option.name] = true;
          } else if (option.argType === Option.type.single) {
            optionObj[option.name] = args[i + 1];
          } else if (option.argType === Option.type.multiple) {
            initialI = i;
            i++;
            optionArgArray = [];
            while (!(Option.isOptionSwitch(args[i]))) {
              optionArgArray.push(args[i]);
              i++;
            }
            optionObj[option.name] = optionArgArray;
          }
        }
      }
      return optionObj;
    };

    Command.prototype.extractSingleArgs = function(commandArgs, args) {
      var applyArgs, commandArg, i, _i, _ref;
      applyArgs = [];
      for (i = _i = 0, _ref = commandArgs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        commandArg = commandArgs[i];
        if (this.isSingleArg(commandArg)) {
          applyArgs.push(args[i]);
        } else if (this.isMultipleArgs(commandArg)) {
          break;
        }
      }
      return applyArgs;
    };

    Command.prototype.extractMultipleArgs = function(commandArgs, args) {
      var commandArg, i, j, multipleArgs, _i, _j, _ref, _ref1;
      multipleArgs = [];
      for (i = _i = 0, _ref = commandArgs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        commandArg = commandArgs[i];
        if (this.isMultipleArgs(commandArg)) {
          for (j = _j = i, _ref1 = args.length - 1; i <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = i <= _ref1 ? ++_j : --_j) {
            if (Option.isOptionSwitch(args[j])) {
              break;
            }
            multipleArgs.push(args[j]);
          }
          break;
        }
      }
      return multipleArgs;
    };

    return Command;

  })(Jobject);

  module.exports = Command;

}).call(this);
