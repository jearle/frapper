// Generated by CoffeeScript 1.4.0
(function() {
  var assert, frap, should;

  assert = require('assert');

  frap = require('../');

  should = require('should');

  describe('frap.Option', function() {
    var testCommand, testDescription, testOption;
    testCommand = '-o, --option1 <variable>';
    testDescription = 'test description';
    testOption = new frap.Option(testCommand, testDescription);
    describe('#longHand', function() {
      return it('should return --option1', function() {
        return testOption.longHand.should.be.eql('--option1');
      });
    });
    describe('#shortHand', function() {
      return it('should return -o', function() {
        return testOption.shortHand.should.be.eql('-o');
      });
    });
    describe('#description()', function() {
      return it('should return ' + testDescription, function() {
        return testOption.description.should.be.eql(testDescription);
      });
    });
    describe('#name', function() {
      return it('should return option1', function() {
        return testOption.name.should.be.eql('option1');
      });
    });
    return describe('#argType()', function() {
      var testOptionBool, testOptionMultiple;
      it('should return type Option.type.single', function() {
        return testOption.argType.should.equal(frap.Option.type.single);
      });
      testOptionMultiple = new frap.Option('-o, --option1 [variables]', testDescription);
      it('should return type Option.type.multiple', function() {
        return testOptionMultiple.argType.should.equal(frap.Option.type.multiple);
      });
      testOptionBool = new frap.Option('-o, --option1', testDescription);
      return it('should return type Option.type.bool', function() {
        return testOptionBool.argType.should.equal(frap.Option.type.bool);
      });
    });
  });

  describe('frap.Option.isOptionSwitch()', function() {
    it('should be true', function() {
      frap.Option.isOptionSwitch('-p').should.be["true"];
      frap.Option.isOptionSwitch('--test-param').should.be["true"];
      return frap.Option.isOptionSwitch('--test').should.be["true"];
    });
    return it('should be false', function() {
      frap.Option.isOptionSwitch('p').should.be["false"];
      return frap.Option.isOptionSwitch('test-param').should.be["false"];
    });
  });

}).call(this);
